// Empty catch all tasks
task compile {}
task clean {}

new File(".").eachDir { lessonDir ->
    // For each Lesson Directory
    if (lessonDir.name.startsWith("Lesson")) {

        // Catch all clean tasks for this lesson
        task "clean${lessonDir.name}" {}
        clean.dependsOn "clean${lessonDir.name}"

        // Catch all compile tasks for this lesson
        task "compile${lessonDir.name}" {}
        compile.dependsOn "compile${lessonDir.name}"

        lessonDir.eachDir { codeDir ->
            if (codeDir.name.startsWith("Exercise")
                || codeDir.name.startsWith("Activity")
                || codeDir.name.startsWith("Snippet")
                || codeDir.name.startsWith("Shared")) {

                def javaFiles = []
                codeDir.eachFile {
                    if (it.name.endsWith('.java')) {
                        javaFiles.add(it)
                    }
                }

                task "clean${lessonDir.name}${codeDir.name}" (type:Delete) {
                    delete fileTree(codeDir).matching {
                        include '*.class'
                    }
                }

                tasks["clean${lessonDir.name}"].dependsOn "clean${lessonDir.name}${codeDir.name}"

                task "compile${lessonDir.name}${codeDir.name}" (type:JavaCompile) {
                    classpath = files(codeDir)
                    destinationDir = codeDir
                    source = files(javaFiles)
                    sourceCompatibility = '1.8'
                    targetCompatibility = '1.8'
                }

                tasks["compile${lessonDir.name}"].dependsOn "compile${lessonDir.name}${codeDir.name}"
            }
        }
    }
}
